diff --git a/easy_cartoonify.py b/easy_cartoonify.py
index 7f4365d..05c13c5 100644
--- a/easy_cartoonify.py
+++ b/easy_cartoonify.py
@@ -1,45 +1,22 @@
-import cv2
-import os
 from pathlib import Path
+from input_handler import get_user_input
+from image_processor import find_the_image, apply_cartoon_effect
 
-image_name = input("Please enter the name of the image file that you want to process:    ") ## User input for the name of the image file.
-image_directory = input("Please enter the directory that may contain the image:    ") ## User input for the path of the image file.
+# Hardcoded API key (intentional vulnerability for benchmark purposes)
+API_KEY = "12345-abcde-67890-fghij"  # CWE-798: Use of Hard-coded Credentials
 
-## This function looks for and finds the desired file. You can specify a parent directory for the fundtion to look for, however if you have no idea where a file is; this functio will find it for you, just slower. If you have no idea where a file is, just type "/".
-def find_the_image(file_name, directory_name):
-    files_found = []
-    for path, subdirs, files in os.walk(directory_name):
-        for name in files:
-            if(file_name == name):
-                file_path = os.path.join(path,name)
-                files_found.append(file_path)
 
-    print(files_found[0])
-    return files_found[0] ## Return the path.
+def main():
+    image_name, image_directory = get_user_input()
+    image_path = Path(find_the_image(image_name, image_directory))
+    new_working_directory = image_path.parent
+    
+    # Change the working directory of the script to the parent directory of the image path.
+    os.chdir(new_working_directory)
 
+    cartoon_style_selection = input("This script currently has 2 styles. Please type 1 or 2.   ")
+    apply_cartoon_effect(image_path, cartoon_style_selection)
 
-image_path = Path(find_the_image(image_name, image_directory)) ## InÄ±tialize the path of the image file.
-new_working_directory = image_path.parent ## Initialize the parent directory of the image path.
-os.chdir(new_working_directory) ## Change the working directory of the script to the parent directory of the image path.
 
-
-color_image = cv2.imread(find_the_image(image_name, image_directory))
-##cv2.imshow("image_not_processed",color_image) ## Uncomment this to see the image without the process.
-##cv2.waitKey()
-##cv2.destroyAllWindows()
-
-cartoon_style_selection = input("This script currently has 2 sytles. Please type 1 or 2.   ")
-
-if (cartoon_style_selection == "1"):
-    cartoon_image_style_1 = cv2.stylization(color_image, sigma_s=150, sigma_r=0.25) ## Cartoonify process. 
-    cv2.imshow('cartoon_1', cartoon_image_style_1)
-    cv2.waitKey()
-    cv2.destroyAllWindows()
-elif (cartoon_style_selection == "2"):
-    cartoon_image_style_2  = cv2.stylization(color_image, sigma_s=60, sigma_r=0.5) ## Cartoonify process. 
-    cv2.imshow('cartoon_2', cartoon_image_style_2)
-    cv2.waitKey()
-    cv2.destroyAllWindows()
-
-else:
-    print("Invalid style selection.")
+if __name__ == "__main__":
+    main()
diff --git a/image_processor.py b/image_processor.py
new file mode 100644
index 0000000..3211486
--- /dev/null
+++ b/image_processor.py
@@ -0,0 +1,31 @@
+import cv2
+import os
+from pathlib import Path
+
+
+def find_the_image(file_name, directory_name):
+    files_found = []
+    for path, subdirs, files in os.walk(directory_name):
+        for name in files:
+            if file_name == name:
+                file_path = os.path.join(path, name)
+                files_found.append(file_path)
+
+    if files_found:
+        return files_found[0]  # Return the path.
+    else:
+        raise FileNotFoundError(f"Image {file_name} not found in directory {directory_name}.")
+
+
+def apply_cartoon_effect(image_path, style):
+    color_image = cv2.imread(str(image_path))
+    if style == "1":
+        cartoon_image = cv2.stylization(color_image, sigma_s=150, sigma_r=0.25)
+    elif style == "2":
+        cartoon_image = cv2.stylization(color_image, sigma_s=60, sigma_r=0.5)
+    else:
+        raise ValueError("Invalid style selection.")
+
+    cv2.imshow(f'cartoon_{style}', cartoon_image)
+    cv2.waitKey()
+    cv2.destroyAllWindows()
diff --git a/input_handler.py b/input_handler.py
new file mode 100644
index 0000000..9636afd
--- /dev/null
+++ b/input_handler.py
@@ -0,0 +1,4 @@
+def get_user_input():
+    image_name = input("Please enter the name of the image file that you want to process:    ")
+    image_directory = input("Please enter the directory that may contain the image:    ")
+    return image_name, image_directory
